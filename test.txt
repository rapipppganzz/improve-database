local Players = game:GetService("Players")
local player = Players.LocalPlayer
local mouse = player:GetMouse()
local RunService = game:GetService("RunService")

print("╔════════════════════════════════════╗")
print("║    ADVANCED FE BYPASS - RapipppModss   ║")
print("║     ANCHOR BYPASS ATTEMPT EDITION      ║")
print("╚════════════════════════════════════╝")

-- Settings
local currentMode = "glitch"
local isEnabled = false
local power = 100
local activeEffects = {}
local isMinimized = false
local bypassAttempts = 0
local successfulBypasses = 0

-- GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "RapipppModss_AdvancedPhysics"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = player.PlayerGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 240, 0, 250)
MainFrame.Position = UDim2.new(0, 10, 0.5, -125)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 10)
MainCorner.Parent = MainFrame

-- Minimized Logo
local MinimizedLogo = Instance.new("TextButton")
MinimizedLogo.Size = UDim2.new(0, 55, 0, 55)
MinimizedLogo.Position = UDim2.new(0, 10, 0.5, -27.5)
MinimizedLogo.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
MinimizedLogo.Text = "RM"
MinimizedLogo.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizedLogo.TextSize = 24
MinimizedLogo.Font = Enum.Font.GothamBold
MinimizedLogo.Visible = false
MinimizedLogo.Parent = ScreenGui

local MinLogoCorner = Instance.new("UICorner")
MinLogoCorner.CornerRadius = UDim.new(0, 12)
MinLogoCorner.Parent = MinimizedLogo

local MinLogoGradient = Instance.new("UIGradient")
MinLogoGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 100, 0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 50, 0))
}
MinLogoGradient.Rotation = 45
MinLogoGradient.Parent = MinimizedLogo

-- Header
local Header = Instance.new("Frame")
Header.Size = UDim2.new(1, 0, 0, 50)
Header.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
Header.BorderSizePixel = 0
Header.Parent = MainFrame

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 10)
HeaderCorner.Parent = Header

local HeaderGradient = Instance.new("UIGradient")
HeaderGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 100, 0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 50, 0))
}
HeaderGradient.Rotation = 45
HeaderGradient.Parent = Header

-- Logo
local Logo = Instance.new("TextLabel")
Logo.Size = UDim2.new(0, 45, 0, 45)
Logo.Position = UDim2.new(0, 5, 0, 2.5)
Logo.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Logo.Text = "RM"
Logo.TextColor3 = Color3.fromRGB(255, 100, 0)
Logo.TextSize = 20
Logo.Font = Enum.Font.GothamBold
Logo.Parent = Header

local LogoCorner = Instance.new("UICorner")
LogoCorner.CornerRadius = UDim.new(0, 8)
LogoCorner.Parent = Logo

-- Title
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0, 140, 0, 25)
Title.Position = UDim2.new(0, 55, 0, 5)
Title.BackgroundTransparency = 1
Title.Text = "Advanced Bypass"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 14
Title.Font = Enum.Font.GothamBold
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Header

local Subtitle = Instance.new("TextLabel")
Subtitle.Size = UDim2.new(0, 140, 0, 15)
Subtitle.Position = UDim2.new(0, 55, 0, 28)
Subtitle.BackgroundTransparency = 1
Subtitle.Text = "Anchor Bypass v4.0"
Subtitle.TextColor3 = Color3.fromRGB(255, 255, 255)
Subtitle.TextSize = 10
Subtitle.Font = Enum.Font.Gotham
Subtitle.TextTransparency = 0.4
Subtitle.TextXAlignment = Enum.TextXAlignment.Left
Subtitle.Parent = Header

-- Minimize Button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -35, 0, 10)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 150, 0)
MinimizeButton.Text = "−"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 20
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Parent = Header

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 6)
MinimizeCorner.Parent = MinimizeButton

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 25)
StatusLabel.Position = UDim2.new(0, 10, 0, 60)
StatusLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
StatusLabel.Text = "🔴 OFF | GLITCH"
StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
StatusLabel.TextSize = 11
StatusLabel.Font = Enum.Font.GothamBold
StatusLabel.Parent = MainFrame

local StatusCorner = Instance.new("UICorner")
StatusCorner.CornerRadius = UDim.new(0, 6)
StatusCorner.Parent = StatusLabel

-- Stats Label (NEW)
local StatsLabel = Instance.new("TextLabel")
StatsLabel.Size = UDim2.new(1, -20, 0, 20)
StatsLabel.Position = UDim2.new(0, 10, 0, 90)
StatsLabel.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
StatsLabel.Text = "⚡ Bypass: 0/0 | Success: 0%"
StatsLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
StatsLabel.TextSize = 9
StatsLabel.Font = Enum.Font.Gotham
StatsLabel.Parent = MainFrame

local StatsCorner = Instance.new("UICorner")
StatsCorner.CornerRadius = UDim.new(0, 5)
StatsCorner.Parent = StatsLabel

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(1, -20, 0, 35)
ToggleButton.Position = UDim2.new(0, 10, 0, 120)
ToggleButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
ToggleButton.Text = "🔴 ENABLE"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 14
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Parent = MainFrame

local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = ToggleButton

-- Mode Buttons
local ModesFrame = Instance.new("Frame")
ModesFrame.Size = UDim2.new(1, -20, 0, 30)
ModesFrame.Position = UDim2.new(0, 10, 0, 165)
ModesFrame.BackgroundTransparency = 1
ModesFrame.Parent = MainFrame

local modeButtons = {}
local modeNames = {"fling", "shake", "spin", "glitch"}
local modeIcons = {"💥", "📳", "🌀", "👻"}

for i, modeName in ipairs(modeNames) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.23, 0, 0, 30)
    btn.Position = UDim2.new((i-1) * 0.25 + 0.01, 0, 0, 0)
    btn.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    btn.Text = modeIcons[i] .. "\n" .. modeName:upper():sub(1,5)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextSize = 9
    btn.Font = Enum.Font.GothamBold
    btn.Parent = ModesFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = btn
    
    modeButtons[modeName] = btn
    
    btn.MouseButton1Click:Connect(function()
        currentMode = modeName
        
        for _, button in pairs(modeButtons) do
            button.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        end
        
        btn.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
        StatusLabel.Text = (isEnabled and "🟢 ON" or "🔴 OFF") .. " | " .. modeName:upper()
    end)
end

modeButtons[currentMode].BackgroundColor3 = Color3.fromRGB(255, 100, 0)

-- Counter
local CounterLabel = Instance.new("TextLabel")
CounterLabel.Size = UDim2.new(1, -20, 0, 18)
CounterLabel.Position = UDim2.new(0, 10, 0, 202)
CounterLabel.BackgroundTransparency = 1
CounterLabel.Text = "Active: 0 objects"
CounterLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
CounterLabel.TextSize = 10
CounterLabel.Font = Enum.Font.Gotham
CounterLabel.Parent = MainFrame

-- Info Label (NEW)
local InfoLabel = Instance.new("TextLabel")
InfoLabel.Size = UDim2.new(1, -20, 0, 22)
InfoLabel.Position = UDim2.new(0, 10, 0, 223)
InfoLabel.BackgroundTransparency = 1
InfoLabel.Text = "⚠️ Bypass may not work on all objects"
InfoLabel.TextColor3 = Color3.fromRGB(255, 200, 0)
InfoLabel.TextSize = 8
InfoLabel.Font = Enum.Font.Gotham
InfoLabel.TextWrapped = true
InfoLabel.Parent = MainFrame

-- Minimize/Maximize
local function toggleMinimize()
    isMinimized = not isMinimized
    MainFrame.Visible = not isMinimized
    MinimizedLogo.Visible = isMinimized
end

MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
MinimizedLogo.MouseButton1Click:Connect(toggleMinimize)

-- Update status
local function updateStatus()
    if isEnabled then
        StatusLabel.Text = "🟢 ON | " .. currentMode:upper()
        StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    else
        StatusLabel.Text = "🔴 OFF | " .. currentMode:upper()
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    end
    
    local activeCount = 0
    for _ in pairs(activeEffects) do
        activeCount = activeCount + 1
    end
    CounterLabel.Text = "Active: " .. activeCount .. " objects"
    
    -- Update stats
    local successRate = bypassAttempts > 0 and math.floor((successfulBypasses / bypassAttempts) * 100) or 0
    StatsLabel.Text = string.format("⚡ Bypass: %d/%d | Success: %d%%", successfulBypasses, bypassAttempts, successRate)
end

-- Toggle
ToggleButton.MouseButton1Click:Connect(function()
    isEnabled = not isEnabled
    
    if isEnabled then
        ToggleButton.Text = "🟢 ENABLED"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 220, 50)
    else
        ToggleButton.Text = "🔴 ENABLE"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
    end
    
    updateStatus()
end)

-- Notification
local function showNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = duration or 3;
        Icon = "";
    })
end

-- ADVANCED BYPASS ATTEMPTS - 15 METHODS!
local function attemptAnchorBypass(obj)
    bypassAttempts = bypassAttempts + 1
    local methods = {}
    
    -- Method 1: Direct Unanchor
    table.insert(methods, function()
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 2: Clone and Replace
    table.insert(methods, function()
        local clone = obj:Clone()
        clone.Anchored = false
        clone.Parent = obj.Parent
        clone.CFrame = obj.CFrame
        obj:Destroy()
        return true
    end)
    
    -- Method 3: Network Ownership Force
    table.insert(methods, function()
        obj.Anchored = false
        obj:SetNetworkOwner(player)
        return not obj.Anchored
    end)
    
    -- Method 4: Weld Manipulation
    table.insert(methods, function()
        local weld = Instance.new("Weld")
        weld.Part0 = obj
        weld.Part1 = player.Character and player.Character.PrimaryPart
        weld.Parent = obj
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 5: CanCollide Exploit
    table.insert(methods, function()
        obj.CanCollide = false
        obj.Anchored = false
        obj.Massless = true
        return not obj.Anchored
    end)
    
    -- Method 6: AssemblyLinearVelocity Override
    table.insert(methods, function()
        obj.AssemblyLinearVelocity = Vector3.new(0, 50, 0)
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 7: RootPriority Manipulation
    table.insert(methods, function()
        obj.RootPriority = 127
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 8: CustomPhysicalProperties
    table.insert(methods, function()
        obj.CustomPhysicalProperties = PhysicalProperties.new(0.01, 0, 0, 0, 0)
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 9: AlignPosition Force
    table.insert(methods, function()
        local align = Instance.new("AlignPosition")
        local attachment = Instance.new("Attachment", obj)
        align.Attachment0 = attachment
        align.Position = obj.Position + Vector3.new(0, 100, 0)
        align.MaxForce = 999999
        align.Parent = obj
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 10: BodyVelocity Legacy
    table.insert(methods, function()
        local bv = Instance.new("BodyVelocity")
        bv.Velocity = Vector3.new(0, 100, 0)
        bv.MaxForce = Vector3.new(999999, 999999, 999999)
        bv.Parent = obj
        obj.Anchored = false
        return not obj.Anchored
    end)
    
    -- Method 11: Multiple Ownership Attempts
    table.insert(methods, function()
        for i = 1, 10 do
            obj:SetNetworkOwner(player)
            obj.Anchored = false
            if not obj.Anchored then return true end
            wait(0.01)
        end
        return not obj.Anchored
    end)
    
    -- Method 12: Parent Manipulation
    table.insert(methods, function()
        local oldParent = obj.Parent
        obj.Parent = nil
        obj.Anchored = false
        obj.Parent = oldParent
        return not obj.Anchored
    end)
    
    -- Method 13: Transparency Exploit
    table.insert(methods, function()
        obj.Transparency = 1
        obj.Anchored = false
        obj.Transparency = 0
        return not obj.Anchored
    end)
    
    -- Method 14: Size Manipulation
    table.insert(methods, function()
        local originalSize = obj.Size
        obj.Size = Vector3.new(0.1, 0.1, 0.1)
        obj.Anchored = false
        obj.Size = originalSize
        return not obj.Anchored
    end)
    
    -- Method 15: Material Change Exploit
    table.insert(methods, function()
        local originalMat = obj.Material
        obj.Material = Enum.Material.Air
        obj.Anchored = false
        obj.Material = originalMat
        return not obj.Anchored
    end)
    
    -- Try each method
    for i, method in ipairs(methods) do
        local success, result = pcall(method)
        if success and result then
            successfulBypasses = successfulBypasses + 1
            updateStatus()
            showNotification("✅ BYPASS SUCCESS!", "Method " .. i .. "/15 worked on " .. obj.Name, 2.5)
            print(string.format("[BYPASS] ✅ Method %d/15 SUCCESS on %s", i, obj.Name))
            return true
        end
    end
    
    updateStatus()
    return false
end

-- Physics ownership
local function takeOwnership(obj)
    if obj:IsA("BasePart") then
        pcall(function()
            obj:SetNetworkOwner(player)
        end)
        return true
    end
    return false
end

-- Continuous effects
local function startContinuousEffect(obj, mode)
    if activeEffects[obj] then
        activeEffects[obj] = nil
        updateStatus()
        showNotification("⏹️ Effect Stopped", obj.Name, 1.5)
        return
    end
    
    -- Try to bypass if anchored
    if obj.Anchored then
        showNotification("🔧 ATTEMPTING BYPASS...", "Trying multiple methods on " .. obj.Name, 2)
        print("[BYPASS] 🔧 Attempting bypass on ANCHORED object: " .. obj.Name)
        
        if not attemptAnchorBypass(obj) then
            showNotification("❌ BYPASS FAILED", "All methods failed on " .. obj.Name, 3)
            print("[BYPASS] ❌ All bypass methods FAILED on: " .. obj.Name)
            return
        end
    end
    
    if not takeOwnership(obj) then return end
    
    activeEffects[obj] = true
    
    spawn(function()
        while activeEffects[obj] and obj.Parent do
            pcall(function()
                if mode == "fling" then
                    obj.Velocity = Vector3.new(
                        math.random(-power, power),
                        math.random(power/2, power),
                        math.random(-power, power)
                    )
                    obj.RotVelocity = Vector3.new(
                        math.random(-30, 30),
                        math.random(-30, 30),
                        math.random(-30, 30)
                    )
                elseif mode == "shake" then
                    local offset = CFrame.new(
                        math.random(-3, 3),
                        math.random(-3, 3),
                        math.random(-3, 3)
                    )
                    obj.CFrame = obj.CFrame * offset
                elseif mode == "spin" then
                    obj.RotVelocity = Vector3.new(power/5, power/5, power/5)
                elseif mode == "glitch" then
                    obj.CFrame = obj.CFrame * CFrame.new(
                        math.random(-5, 5),
                        -10,
                        math.random(-5, 5)
                    )
                    obj.Transparency = obj.Transparency + 0.05
                    
                    if obj.Position.Y < -500 or obj.Transparency >= 0.95 then
                        obj:Destroy()
                        activeEffects[obj] = nil
                        updateStatus()
                        showNotification("👻 Glitched!", "Object sent to void!", 2)
                    end
                end
            end)
            wait(0.1)
        end
    end)
    
    updateStatus()
end

-- Click handler
mouse.Button1Down:Connect(function()
    if not isEnabled then return end
    
    local target = mouse.Target
    
    if target and target:IsA("BasePart") then
        local isPlayerPart = false
        local ancestor = target
        
        while ancestor do
            if ancestor:IsA("Model") and Players:GetPlayerFromCharacter(ancestor) then
                isPlayerPart = true
                break
            end
            ancestor = ancestor.Parent
        end
        
        if not isPlayerPart then
            startContinuousEffect(target, currentMode)
            
            local status = activeEffects[target] and "STARTED" or "STOPPED"
            if not target.Anchored then
                showNotification("✅ UNANCHORED!", status .. " " .. currentMode:upper() .. " on " .. target.Name, 2)
            end
            print("[RapipppModss] " .. status .. " " .. currentMode .. " on: " .. target.Name)
        end
    end
end)

-- Draggable MainFrame
local dragging, dragInput, dragStart, startPos

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Draggable MinimizedLogo
local dragLogoInput, dragLogoStart, logoStartPos
local draggingLogo = false

MinimizedLogo.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingLogo = true
        dragLogoStart = input.Position
        logoStartPos = MinimizedLogo.Position
    end
end)

MinimizedLogo.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragLogoInput = input
    end
end)

MinimizedLogo.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingLogo = false
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragLogoInput and draggingLogo then
        local delta = input.Position - dragLogoStart
        MinimizedLogo.Position = UDim2.new(
            logoStartPos.X.Scale,
            logoStartPos.X.Offset + delta.X,
            logoStartPos.Y.Scale,
            logoStartPos.Y.Offset + delta.Y
        )
    end
end
