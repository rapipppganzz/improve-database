--[[
    🏔️ AUTO MOUNTAIN CLIMBER - DELTA ANDROID COMPATIBLE
    FULL FIXED VERSION
]]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PathfindingService = game:GetService("PathfindingService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Config
_G.Config = _G.Config or {
    Enabled = false,
    WalkSpeed = 25,
    AutoJump = true,
    SearchRadius = 100,
    SearchHeight = 200,
    TargetPosition = nil
}

-- ========== AUTO TARGET FINDER ==========
local function findHighestPoint()
    print("🔍 Mencari titik tertinggi di area...")
    
    local bestPosition = nil
    local highestY = -math.huge
    
    local scanRadius = _G.Config.SearchRadius
    local center = rootPart.Position
    
    for x = -scanRadius, scanRadius, 20 do
        for z = -scanRadius, scanRadius, 20 do
            local scanPos = Vector3.new(center.X + x, center.Y + _G.Config.SearchHeight, center.Z + z)
            local ray = Ray.new(scanPos, Vector3.new(0, -_G.Config.SearchHeight * 2, 0))
            local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {character})
            
            if hit and position.Y > highestY then
                highestY = position.Y
                bestPosition = position
            end
        end
    end
    
    if bestPosition then
        print("🎯 Titik tertinggi ditemukan: " .. tostring(bestPosition))
    else
        local finishParts = {"Finish", "End", "Goal", "Win", "Complete", "EndPoint", "FinishLine", "Victory"}
        for _, partName in ipairs(finishParts) do
            local part = workspace:FindFirstChild(partName)
            if part then
                bestPosition = part.Position
                print("🎯 Finish part ditemukan: " .. partName)
                break
            end
        end
    end
    
    return bestPosition
end

local function findPathToTarget()
    if not _G.Config.TargetPosition then
        _G.Config.TargetPosition = findHighestPoint()
        
        if not _G.Config.TargetPosition then
            local randomPos = rootPart.Position + Vector3.new(
                math.random(-50, 50),
                math.random(10, 30),
                math.random(-50, 50)
            )
            _G.Config.TargetPosition = randomPos
            print("🔍 Explore random position")
        end
    end
    
    return _G.Config.TargetPosition
end

-- ========== SMART NAVIGATION ==========
local path = nil
local waypoints = nil
local currentWaypointIndex = 0
local lastStuckCheck = os.time()
local lastPosition = rootPart.Position

local function computePath(targetPosition)
    if not PathfindingService then 
        return {{Position = targetPosition, Action = Enum.PathWaypointAction.Walk}}
    end
    
    local success, result = pcall(function()
        path = PathfindingService:CreatePath({
            AgentRadius = 2,
            AgentHeight = 5,
            AgentCanJump = true,
            WaypointSpacing = 6
        })
        
        path:ComputeAsync(rootPart.Position, targetPosition)
        
        if path.Status == Enum.PathStatus.Success then
            return path:GetWaypoints()
        else
            print("⚠️ Pathfinding gagal, menggunakan direct movement")
            return {{Position = targetPosition, Action = Enum.PathWaypointAction.Walk}}
        end
    end)
    
    return success and result or {{Position = targetPosition, Action = Enum.PathWaypointAction.Walk}}
end

local function moveToWaypoint()
    if not waypoints or currentWaypointIndex > #waypoints then
        return false
    end
    
    local waypoint = waypoints[currentWaypointIndex]
    local direction = (waypoint.Position - rootPart.Position).Unit
    
    humanoid:Move(direction)
    
    local distance = (rootPart.Position - waypoint.Position).Magnitude
    if distance < 5 then
        currentWaypointIndex = currentWaypointIndex + 1
    end
    
    if waypoint.Action == Enum.PathWaypointAction.Jump then
        humanoid.Jump = true
    end
    
    return currentWaypointIndex <= #waypoints
end

local function checkFrontObstacle()
    local rayOrigin = rootPart.Position + Vector3.new(0, 2, 0)
    local rayDirection = rootPart.CFrame.LookVector * 8
    local ray = Ray.new(rayOrigin, rayDirection)
    
    local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, {character})
    return hit and hit.CanCollide
end

local function checkIfStuck()
    local currentTime = os.time()
    if currentTime - lastStuckCheck < 2 then return false end
    
    local currentPos = rootPart.Position
    local distanceMoved = (currentPos - lastPosition).Magnitude
    
    if distanceMoved < 2 then
        print("🔄 Karakter stuck, mencari path baru...")
        lastStuckCheck = currentTime
        return true
    end
    
    lastPosition = currentPos
    lastStuckCheck = currentTime
    return false
end

-- ========== MAIN BOT BRAIN ==========
local function smartNavigation()
    if not _G.Config.Enabled then return end
    
    if not character or not character.Parent then
        character = player.Character
        if character then
            humanoid = character:FindFirstChildOfClass("Humanoid")
            rootPart = character:FindFirstChild("HumanoidRootPart")
        end
        return
    end
    
    if not humanoid or not rootPart then return end
    
    humanoid.WalkSpeed = _G.Config.WalkSpeed
    
    if checkIfStuck() then
        waypoints = nil
        _G.Config.TargetPosition = nil
        humanoid.Jump = true
        task.wait(0.5)
    end
    
    if not _G.Config.TargetPosition then
        findPathToTarget()
    end
    
    if not waypoints or currentWaypointIndex > #waypoints then
        local target = findPathToTarget()
        waypoints = computePath(target)
        currentWaypointIndex = 1
        print("🔄 Computing path ke target...")
    end
    
    if waypoints and currentWaypointIndex <= #waypoints then
        if not moveToWaypoint() then
            print("✅ Path selesai, mencari target baru...")
            waypoints = nil
            _G.Config.TargetPosition = nil
        end
    end
    
    if _G.Config.AutoJump and checkFrontObstacle() then
        humanoid.Jump = true
        task.wait(0.2)
    end
    
    if os.time() % 30 < 0.1 then
        _G.Config.TargetPosition = nil
        print("🔄 Auto re-targeting...")
    end
end

-- ========== FIXED GUI FOR DELTA ANDROID ==========
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "MountainClimber"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Coba semua method parenting untuk Delta Android
local guiParentSuccess = false

-- Method 1: CoreGui (paling umum)
if not guiParentSuccess then
    local success, err = pcall(function()
        ScreenGui.Parent = game:GetService("CoreGui")
        guiParentSuccess = true
        print("✅ GUI Parent: CoreGui")
    end)
end

-- Method 2: PlayerGui  
if not guiParentSuccess then
    local success, err = pcall(function()
        ScreenGui.Parent = player:WaitForChild("PlayerGui")
        guiParentSuccess = true
        print("✅ GUI Parent: PlayerGui")
    end)
end

-- Method 3: StarterGui
if not guiParentSuccess then
    local success, err = pcall(function()
        ScreenGui.Parent = game:GetService("StarterGui")
        guiParentSuccess = true
        print("✅ GUI Parent: StarterGui")
    end)
end

if not guiParentSuccess then
    warn("❌ Failed to parent GUI!")
end

-- Main Frame dengan background yang sangat terlihat
local Main = Instance.new("Frame")
Main.Name = "MainFrame"
Main.Parent = ScreenGui
Main.Size = UDim2.new(0, 350, 0, 350)
Main.Position = UDim2.new(0.02, 0, 0.02, 0)
Main.BackgroundColor3 = Color3.fromRGB(15, 15, 35)
Main.BackgroundTransparency = 0.05
Main.BorderSizePixel = 3
Main.BorderColor3 = Color3.fromRGB(0, 255, 255)
Main.Active = true
Main.Draggable = true
Main.ZIndex = 1000

-- Background untuk kontras
local Background = Instance.new("Frame")
Background.Name = "Background"
Background.Parent = Main
Background.Size = UDim2.new(1, 0, 1, 0)
Background.Position = UDim2.new(0, 0, 0, 0)
Background.BackgroundColor3 = Color3.fromRGB(15, 15, 35)
Background.BackgroundTransparency = 0
Background.BorderSizePixel = 0
Background.ZIndex = 1

-- Title yang sangat terlihat
local Title = Instance.new("TextLabel")
Title.Parent = Main
Title.Name = "Title"
Title.Text = "🏔️ MOUNTAIN CLIMBER"
Title.Size = UDim2.new(1, 0, 0, 45)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 20
Title.ZIndex = 1001
Title.BorderSizePixel = 0

-- Function untuk create button yang pasti kelihatan
local function createVisibleButton(name, text, yPos, color)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Parent = Main
    btn.Size = UDim2.new(0.9, 0, 0, 45)
    btn.Position = UDim2.new(0.05, 0, yPos, 0)
    btn.BackgroundColor3 = color or Color3.fromRGB(50, 50, 80)
    btn.BorderSizePixel = 2
    btn.BorderColor3 = Color3.fromRGB(100, 100, 200)
    btn.Text = text
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.ZIndex = 1001
    btn.AutoButtonColor = true
    return btn
end

-- Buttons dengan posisi yang jelas
local toggleBtn = createVisibleButton("ToggleBtn", "🚀 START CLIMBING", 0.15, Color3.fromRGB(0, 150, 0))

-- Speed Controls
local speedDown = createVisibleButton("SpeedDown", "➖ SPEED DOWN", 0.30, Color3.fromRGB(200, 100, 0))
speedDown.Size = UDim2.new(0.4, 0, 0, 40)

local speedUp = createVisibleButton("SpeedUp", "➕ SPEED UP", 0.30, Color3.fromRGB(0, 100, 200))
speedUp.Position = UDim2.new(0.52, 0, 0.30, 0)
speedUp.Size = UDim2.new(0.4, 0, 0, 40)

-- Speed Label
local speedLbl = Instance.new("TextLabel")
speedLbl.Parent = Main
speedLbl.Name = "SpeedLabel"
speedLbl.Size = UDim2.new(0.9, 0, 0, 30)
speedLbl.Position = UDim2.new(0.05, 0, 0.45, 0)
speedLbl.BackgroundTransparency = 1
speedLbl.Text = "⚡ CURRENT SPEED: " .. _G.Config.WalkSpeed
speedLbl.TextColor3 = Color3.fromRGB(255, 255, 0)
speedLbl.Font = Enum.Font.GothamBold
speedLbl.TextSize = 16
speedLbl.ZIndex = 1001

-- Auto Jump Toggle
local jumpToggle = createVisibleButton("JumpToggle", "🦘 AUTO JUMP: ON", 0.55, Color3.fromRGB(0, 120, 80))
jumpToggle.Size = UDim2.new(0.9, 0, 0, 35)

-- Status Display
local statusLbl = Instance.new("TextLabel")
statusLbl.Parent = Main
statusLbl.Name = "StatusLabel"
statusLbl.Size = UDim2.new(0.9, 0, 0, 80)
statusLbl.Position = UDim2.new(0.05, 0, 0.68, 0)
statusLbl.BackgroundColor3 = Color3.fromRGB(30, 30, 60)
statusLbl.BorderSizePixel = 2
statusLbl.BorderColor3 = Color3.fromRGB(0, 200, 200)
statusLbl.TextColor3 = Color3.fromRGB(0, 255, 150)
statusLbl.Font = Enum.Font.Gotham
statusLbl.TextSize = 12
statusLbl.TextWrapped = true
statusLbl.ZIndex = 1001
statusLbl.Text = "🤖 STATUS: READY\n📍 Press START to begin climbing!\n📱 Delta Android Compatible"

-- Close Button
local closeBtn = Instance.new("TextButton")
closeBtn.Parent = Main
closeBtn.Name = "CloseBtn"
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(0.92, 0, 0.02, 0)
closeBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
closeBtn.BorderSizePixel = 0
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.white
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 16
closeBtn.ZIndex = 1002
closeBtn.AutoButtonColor = true

-- ========== BUTTON FUNCTIONALITY ==========
toggleBtn.MouseButton1Click:Connect(function()
    _G.Config.Enabled = not _G.Config.Enabled
    
    if _G.Config.Enabled then
        toggleBtn.Text = "🛑 STOP CLIMBING"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        _G.Config.TargetPosition = nil
        waypoints = nil
        print("🏔️ Mountain Climber: STARTED")
        statusLbl.Text = "🏔️ Sedang mendaki...\n🔍 Mencari jalur..."
    else
        toggleBtn.Text = "🚀 START CLIMBING"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        if humanoid then
            humanoid:Move(Vector3.new(0, 0, 0))
        end
        print("🏔️ Mountain Climber: STOPPED")
        statusLbl.Text = "🤖 Status: Ready\n📍 Tekan START untuk mulai!"
    end
end)

speedUp.MouseButton1Click:Connect(function()
    _G.Config.WalkSpeed = math.min(50, _G.Config.WalkSpeed + 5)
    speedLbl.Text = "⚡ CURRENT SPEED: " .. _G.Config.WalkSpeed
    if humanoid then
        humanoid.WalkSpeed = _G.Config.WalkSpeed
    end
end)

speedDown.MouseButton1Click:Connect(function()
    _G.Config.WalkSpeed = math.max(16, _G.Config.WalkSpeed - 5)
    speedLbl.Text = "⚡ CURRENT SPEED: " .. _G.Config.WalkSpeed
    if humanoid then
        humanoid.WalkSpeed = _G.Config.WalkSpeed
    end
end)

jumpToggle.MouseButton1Click:Connect(function()
    _G.Config.AutoJump = not _G.Config.AutoJump
    if _G.Config.AutoJump then
        jumpToggle.Text = "🦘 AUTO JUMP: ON"
        jumpToggle.BackgroundColor3 = Color3.fromRGB(0, 120, 80)
    else
        jumpToggle.Text = "❌ AUTO JUMP: OFF"
        jumpToggle.BackgroundColor3 = Color3.fromRGB(120, 0, 0)
    end
end)

closeBtn.MouseButton1Click:Connect(function()
    _G.Config.Enabled = false
    if humanoid then
        humanoid:Move(Vector3.new(0, 0, 0))
    end
    ScreenGui:Destroy()
    print("🏔️ Mountain Climber: Closed")
end)

-- ========== CHAT COMMANDS BACKUP ==========
player.Chatted:Connect(function(message)
    local msg = message:lower()
    if msg == "/start" then
        _G.Config.Enabled = true
        toggleBtn.Text = "🛑 STOP CLIMBING"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        statusLbl.Text = "🏔️ STARTED via chat command!"
        print("🏔️ STARTED via chat command")
    elseif msg == "/stop" then
        _G.Config.Enabled = false
        toggleBtn.Text = "🚀 START CLIMBING"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        statusLbl.Text = "🤖 STOPPED via chat command"
        print("🏔️ STOPPED via chat command")
    elseif msg == "/speed" then
        _G.Config.WalkSpeed = _G.Config.WalkSpeed + 10
        speedLbl.Text = "⚡ CURRENT SPEED: " .. _G.Config.WalkSpeed
        print("🏔️ Speed: " .. _G.Config.WalkSpeed)
    end
end)

-- ========== MAIN LOOP ==========
local navigationConnection
navigationConnection = RunService.Heartbeat:Connect(function()
    if _G.Config.Enabled then
        local success, err = pcall(smartNavigation)
        if not success then
            print("❌ Navigation error: " .. err)
            statusLbl.Text = "❌ Error: " .. err
        end
        
        if _G.Config.TargetPosition and rootPart then
            local dist = math.floor((rootPart.Position - _G.Config.TargetPosition).Magnitude)
            local height = math.floor(rootPart.Position.Y)
            statusLbl.Text = "🏔️ Mendaki Gunung...\n📏 Jarak target: " .. dist .. " studs\n📐 Ketinggian: " .. height .. "m\n🎯 Waypoint: " .. currentWaypointIndex
        end
    end
end)

-- ========== RESPAWN HANDLER ==========
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    task.wait(1)
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    waypoints = nil
    currentWaypointIndex = 0
    _G.Config.TargetPosition = nil
    
    print("🏔️ Character respawned - Climber reset")
    
    -- Update status jika GUI masih ada
    if statusLbl and statusLbl.Parent then
        statusLbl.Text = "🤖 Character Respawned\n📍 Ready to climb again!"
    end
end)

-- ========== GUI VISIBILITY CHECK ==========
task.wait(2)

-- Cek jika GUI berhasil dimuat
if Main and Main.Parent then
    print("🎉 GUI SUCCESSFULLY LOADED!")
    statusLbl.Text = "✅ GUI LOADED SUCCESS!\n🤖 Ready to climb!\n📱 Delta Android"
else
    print("❌ GUI FAILED - Creating emergency GUI...")
    
    -- Emergency simple GUI
    local emergencyGUI = Instance.new("ScreenGui")
    emergencyGUI.Parent = game:GetService("CoreGui")
    emergencyGUI.Name = "EmergencyClimber"
    
    local emergencyFrame = Instance.new("Frame")
    emergencyFrame.Parent = emergencyGUI
    emergencyFrame.Size = UDim2.new(0, 280, 0, 120)
    emergencyFrame.Position = UDim2.new(0.5, -140, 0.1, 0)
    emergencyFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    emergencyFrame.BorderSizePixel = 3
    emergencyFrame.BorderColor3 = Color3.fromRGB(255, 255, 0)
    
    local emergencyText = Instance.new("TextLabel")
    emergencyText.Parent = emergencyFrame
    emergencyText.Size = UDim2.new(1, 0, 1, 0)
    emergencyText.Text = "🏔️ MOUNTAIN CLIMBER\n✅ Script Loaded!\nUse /start and /stop in chat"
    emergencyText.TextColor3 = Color3.fromRGB(255, 255, 255)
    emergencyText.BackgroundTransparency = 1
    emergencyText.TextScaled = true
    emergencyText.Font = Enum.Font.GothamBold
end

-- Cleanup
ScreenGui.Destroying:Connect(function()
    if navigationConnection then
        navigationConnection:Disconnect()
    end
end)

print("========================================")
print("🏔️ AUTO MOUNTAIN CLIMBER LOADED")
print("✅ Delta Android Compatible")
print("✅ Auto Target Detection") 
print("✅ No Manual Checkpoint Needed")
print("✅ Chat Commands: /start, /stop, /speed")
print("========================================")